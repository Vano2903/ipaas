package main

import (
	"context"
	"errors"
	"fmt"
	"log"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
)

type Student struct {
	// MID      primitive.ObjectID `bson:"_id" json:"-"`
	ID       int    `bson:"userID" json:"matricola"` //id of the student (teachers will use the same, but it's 6 digit long instead of 5)
	Name     string `bson:"name" json:"nome"`        //name of the student
	LastName string `bson:"lastName" json:"cognome"` //last name of the student
	Email    string `bson:"email" json:"email"`      //email of the student
	Pfp      string `bson:"pfp" json:"pfp"`          //profile picture of the student (autogenerated)
	IsMock   bool   `bson:"isMock" json:"isMock"`    //if the user is a mock user (used for testing)
	// Applications []string `bson:"applications" json:"applications"` //list of the applications of the student
}

// !currently unesed
type StudentInfo struct {
	Class               string `json:"classe"`
	Year                int    `json:"anno"`
	Field               string `json:"indirizzo"`
	IsClassPresident    bool   `json:"rappresentante_classe"`
	IsIstiturePresident bool   `json:"rappresentante_istituto"`
}

// get student struct from the id (matricola)
func GetStudentFromID(userID int, connection *mongo.Database) (Student, error) {
	var student Student
	err := connection.Collection("users").
		FindOne(context.Background(), bson.M{"userID": userID}).
		Decode(&student)
	if err != nil {
		return student, err
	}

	return student, nil
}

// check if the userUID is saved in the db
func IsUserRegistered(userID int, connection *mongo.Database) (bool, error) {
	var user Student
	err := connection.Collection("users").
		FindOne(context.Background(), bson.M{"userID": userID}).
		Decode(&user)
	fmt.Println("user found: ", user)
	fmt.Println("student id used:", userID)
	if err != nil {
		if err == mongo.ErrNoDocuments {
			return false, nil
		}

		return false, err
	}

	return true, nil
}

// adds the student to the db (it's a pointer because here we generate the pfp)
func AddStudent(student *Student, connection *mongo.Database) error {
	//check if it's already registered
	exists, err := IsUserRegistered(student.ID, connection)
	if err != nil {
		return err
	}
	if exists {
		return errors.New("user already registered")
	}

	student.Pfp = fmt.Sprintf("https://avatars.dicebear.com/api/bottts/%d.svg", student.ID)
	// student.MID = primitive.NewObjectID()
	_, err = connection.Collection("users").InsertOne(context.Background(), student)
	return err
}

// given the paleoid access token and the database connection, it returns the response that
// will be parsed into a json in the response, if the error is client side (4xx or 5xx) and an error
func registerOrGenerateTokenFromPaleoIDAccessToken(paleoidAccess string, connection *mongo.Database) (map[string]interface{}, bool, error) {
	//get the student from the paleoid access token
	student, err := GetStudentFromPaleoIDAccessToken(paleoidAccess)
	if err != nil {
		return nil, true, errors.New("invalid paleoid access token")
	}

	//check if it's in the db
	registered, err := IsUserRegistered(student.ID, connection)
	log.Printf("the user with %d is registered? %t ", student.ID, registered)
	if err != nil {
		return nil, false, err
	}

	//register the user if not already saved
	if !registered {
		log.Println("registering the user")
		err = AddStudent(&student, connection)
		if err != nil {
			return nil, false, err
		}
	}
	//generate the ipaas tokens
	access, refresh, err := GenerateTokenPair(student.ID, connection)
	if err != nil {
		return nil, false, fmt.Errorf("error generating token pair: %v", err)
	}

	//this map will be parsed into a json in the response
	resp := map[string]interface{}{
		"ipaas-access-token":  access,
		"ipaas-refresh-token": refresh,
		"userID":              student.ID,
	}
	return resp, false, nil
}
